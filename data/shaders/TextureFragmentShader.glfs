#version 330 core

#define MAX_LIGHTS 256

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 position_worldspace;
in vec3 normal_cameraspace;
in vec3 eyeDir_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform mat4 V;

uniform float num_lights;
layout(std140) uniform Lights {
	vec4 posAtten[MAX_LIGHTS];
	vec4 rgbPower[MAX_LIGHTS];
} lights;

void main()
{
	vec3 norm = normalize(normal_cameraspace);
	
	// Eye vector (towards the camera)
	vec3 eyeVector = normalize(eyeDir_cameraspace);
	
	vec3 matDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	vec3 matAmbientColor = vec3(0.1,0.08,0.067) * matDiffuseColor;
	vec3 matSpecularColor = vec3(0.04,0.04,0.04);
	
	vec3 calculated_diffuse = vec3(0.0);
	vec3 calculated_spec = vec3(0.0);
	
	for(int i=0; i<int(num_lights); i++) {
		vec3 lightPos_cameraspace = ( V * vec4(lights.posAtten[i].xyz,1)).xyz;
		vec3 lightDir_cameraspace = lightPos_cameraspace + eyeDir_cameraspace;
		
		vec3 light_color = lights.rgbPower[i].xyz;
		float light_power = lights.rgbPower[i].w * 100.0f;
		
		float distance = length(lights.posAtten[i].xyz - position_worldspace);

		vec3 lightdir = normalize(lightDir_cameraspace);
		float direction_mp = dot(lightdir, norm);
		direction_mp = (1.0+direction_mp)/2.0;
		float cosTheta = 1;
		
		float a1 = 1.5/2.0;			//	This means that right next to the light colours get amplified by 33%, set to 1.0, if you don't want that
		float a2 = distance/300.0 * lights.posAtten[i].w;
		float a3 = distance/250.0 * lights.posAtten[i].w;
		float a = 1/(a1 + a2 + a3*a3)/light_power;
		
		calculated_diffuse += (light_color * light_power * direction_mp * cosTheta * a);
		
		// Specular
		vec3 reflectDir = reflect(-lightdir,norm); // Direction in which triangle reflects light
		float cosAlpha = clamp( dot( eyeVector,reflectDir ), 0,1 );
		
		calculated_spec += (light_color * light_power * direction_mp * pow(cosAlpha, 5) / (distance*distance));
	}
	
	
	color = 
		matAmbientColor +
		matDiffuseColor * calculated_diffuse
		+ matSpecularColor * calculated_spec;
}