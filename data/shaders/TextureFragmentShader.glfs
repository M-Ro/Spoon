#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 position_worldspace;
in vec3 normal_cameraspace;
in vec3 eyeDir_cameraspace;
in vec3 lightDir_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 lightPosition_worldspace;

void main()
{
	// Fixme make these uniforms
	vec3 LightColor = vec3(1, 0.84, 0.67);
	float LightPower = 70000.0f;

	vec3 matDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	vec3 matAmbientColor = vec3(0.1,0.08,0.067) * matDiffuseColor;
	vec3 matSpecularColor = vec3(0.15,0.15,0.15);
	
	float distance = length(lightPosition_worldspace - position_worldspace);

	vec3 norm = normalize(normal_cameraspace);
	vec3 lightdir = normalize(lightDir_cameraspace);
	float cosTheta = 1;//clamp( dot( norm,lightdir ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 eyeVector = normalize(eyeDir_cameraspace);
	vec3 reflectDir = reflect(-lightdir,norm); // Direction in which triangle reflects light
	
	float a1 = 10;
	float a2 = 17.9;
	float a3 = 1.1;
	float a = 1/(a1 + a2*distance + a3*distance*distance);
	float cosAlpha = clamp( dot( eyeVector,reflectDir ), 0,1 );
	
	color = 
		matAmbientColor +
		matDiffuseColor * LightColor * LightPower * cosTheta * a;
		//+ matSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
}